#include <stdio.h>
#include<string.h>
#include "encode.h"
#include "types.h"
#include "common.h"

//------------------------------------------------------------------------------------------------------------------------------------------//

//to check all files are open or not
Status open_encode_files(EncodeInfo *encInfo)
{
    // Src Image file
    encInfo->fptr_src_image = fopen(encInfo -> src_image_fname, "r");

    //Do Error handling
    if (encInfo->fptr_src_image == NULL)
    {
	perror("fopen");
	fprintf(stderr, "ERROR: Unable to open file1 %s\n", encInfo -> src_image_fname);
	return e_failure;
    }
    else
    {
	printf("INFO:opened Skeleton/beautiful.bmp file\n");
    }

    // Secret file
    encInfo -> fptr_secret = fopen(encInfo -> secret_fname, "r");

    //Do Error handling
    if (encInfo -> fptr_secret == NULL)
    {
	perror("fopen");
	fprintf(stderr, "ERROR: Unable to open file 2%s\n", encInfo -> secret_fname);
	return e_failure;
    }
    else
    {
	printf("INFO:opened secret file\n");
    }

    // Stego Image file
    encInfo -> fptr_stego_image = fopen(encInfo -> stego_image_fname, "w");

    //Do Error handling
    if (encInfo->fptr_stego_image == NULL)
    {
	perror("fopen");
	fprintf(stderr, "ERROR: Unable to open file 3%s\n", encInfo->stego_image_fname);
	return e_failure;
    }
    else
    {
	printf("INFO:opened stego image file\n");
    }

    // All files opened, return e_success
    return e_success;

}
//----------------------------------------------------------------------------------------------------------------------------------//

//to check the the operation is encoding or decoding
OperationType check_operation_type(char *argv[])
{
    //if null 
    if(argv[1] != NULL)
    {
	//if encoding 
	if(strcmp(argv[1], "-e") == 0)
	    return e_encode;

	//if decoding
	else if(strcmp(argv[1], "-d") == 0)
	    return e_decode;

	//if unsupported format
	else
	    return e_unsupported;
    }
    else
	return e_unsupported;
}
//------------------------------------------------------------------------------------------------------------------------------------//

//to check the passing files are correct or not
Status read_and_validate_encode_args(char *argv[], EncodeInfo *encInfo)
{
    short int i;

    //to open the .bmp file
    FILE *file = fopen(argv[2], "r");

    //to read the first two byte
    fread(&i, sizeof(short int), 1, file);
    encInfo->src_image_fname = argv[2];

    //to check the whether  the it is bmp or not
    if(i != 0x4D42)
    {
	return e_failure;
    }
    fclose(file);
    
    //to check secret file is null or not
    if(argv[3] == NULL)
    {
	return e_failure;
    }
    else
    {
    	printf("INFO:secret file not empty\n");
	encInfo -> secret_fname = argv[3];
    }

    //to check destination file is given or not
    if(argv[4] == NULL)
    {
    	printf("INFO:Output file not mentioned .Created steged image.bmp as default\n");
	encInfo->stego_image_fname = "stego_img.bmp";
	return e_success;

    }
    else
    {
    	printf("INFO:Taking the given file output file name\n");
	encInfo->stego_image_fname = argv[4];
	return e_success;
    }

}

//---------------------------------------------------------------------------------------------------------------------------------------//

//start the ecoding
Status do_encoding(EncodeInfo *encInfo)
{
    printf("INFO:opening the requried files\n");
    if(open_encode_files(encInfo) == e_success)
    {
	printf("INFO:Done\n");
    }
    else
    {
	return e_failure;
    }
    printf("\n##ENCODING PROCEDURE IS STARTED##\n");
    printf("INFO:checking the file capacity\n"); 
    
    //to check check capacity is succeed or not
    if(check_capacity(encInfo) == e_success)
    {
    	printf("INFO:Done\n");
    }
    else
    {
    	return e_failure;
    }
    printf("INFO:coping the header file from bmp file\n");
    if(copy_bmp_header(encInfo->fptr_src_image, encInfo->fptr_stego_image) == e_success)
    {
    	printf("INFO:Done\n");
    }
    else
    {
    	return e_failure;
    }
    printf("INFO:Encoding the magic string signature\n");
    //check magic string encoding is succeed or not
    if(encode_magic_string(MAGIC_STRING, encInfo) == e_success)
    {
    	printf("INFO:Done\n");
    }
    else
    {
    	return e_failure;
    }

    //to get the file extension type
    char *str = ".";
    char *ret = strstr(encInfo->secret_fname, str);
    printf("INFO:Encoding the file extension file\n");
    if(encode_secret_file_extn(ret,encInfo) == e_success)
    {
    	printf("INFO:Done\n");
    }
    else
    {
    	return e_failure;
    }

    printf("INFO:Encoding the secret file size\n");
    if(encode_secret_file_size(MAX_FILE_SUFFIX, encInfo) == e_success)
    {
    	printf("INFO:Done\n");
    }
    else
    {
    	return e_failure;
    }
    printf("INFO:Encoding the file data\n");
    if(encode_secret_file_data(encInfo) == e_success)
    {
    	printf("INFO:Done\n");
    }
    else
    {
	return e_failure;
    }
    printf("INFO:Coping the remaining image file data\n");
    if(copy_remaining_img_data(encInfo->fptr_src_image, encInfo->fptr_stego_image) == e_success)
    {
    	printf("INFO:Done\n");
    	return e_success;
    }
    else
    {
    	return e_failure;
    }
}

//--------------------------------------------------------------------------------------------------------------------------------//

//to check the image size is greater than 398 
Status check_capacity(EncodeInfo *encInfo)
{
    int total;
    unsigned int i;

    //to get the file extension type
    char *str = ".";
    char *ret = strstr(encInfo->secret_fname, str);

    //to calculate the total size required for file
    total = 54 + (strlen(MAGIC_STRING) + sizeof(int) + strlen(ret) + sizeof(encInfo->fptr_secret) + get_file_size(encInfo->fptr_secret))*8;

    i = get_image_size_for_bmp(encInfo->fptr_src_image);

    //to check  the capacity of file
    if(i > total)
    {
	return e_success;
    }
    else
    {
	return e_failure;
    }

}
//---------------------------------------------------------------------------------------------------------------------------------------//

//to find the size of the beautiful.bmp image
uint get_image_size_for_bmp(FILE *fptr_image)
{
    int size;

    //to get the size of bmp file
    fseek(fptr_image, 0, SEEK_END);
    size = ftell(fptr_image);

    //to set offset to 0
    rewind(fptr_image);
    return size;
}
//----------------------------------------------------------------------------------------------------------------------------------------//
uint get_file_size(FILE *fptr)
{
    int size;
    //to get the secret file size
    fseek(fptr, 0, SEEK_END);
    size = ftell(fptr);
    rewind(fptr);
    return size;
}
//-----------------------------------------------------------------------------------------------------------------------------------------//

//copy the 54 bytes to destination file
Status copy_bmp_header(FILE *fptr_src_image, FILE *fptr_dest_image)
{
    int i;
    char ch[54];
    //reading the first 54byte of beatiful.bmp file
    fread(ch, 54, 1, fptr_src_image);

    //to write into the destination file
    fwrite(ch, 54, 1, fptr_dest_image);

    //to compare the file is copied or not
    if(ftell(fptr_src_image) == ftell(fptr_dest_image))
    {
	return e_success;
    }
    else
    {
	return e_failure;
    }
    
}
//-------------------------------------------------------------------------------------------------------------------------------------------//

//encoding of the magic string
Status encode_magic_string(const char *magic_string, EncodeInfo *encInfo)
{
    int i, j;
    int ch, num = 0;

    //encoding the magic string
    for(i = 0; i < strlen(magic_string); i++)
    {
	for(j = 0; j < (sizeof(char)*8) ; j++)
	{
	    fread(&ch, sizeof(char), 1, encInfo->fptr_src_image);
	    num = (ch & (-1 << 1)) | ((*(magic_string + i) >> j) & ~(-1 << 1));  
	    fwrite(&num, sizeof(char), 1, encInfo->fptr_stego_image);
	}
    }
    return e_success;
}
//----------------------------------------------------------------------------------------------------------------------------------------------//

//to check the extension of file
Status encode_secret_file_extn(const char *file_extn,EncodeInfo *encInfo)
{
    int i, j, num;
    char ch;

    //encoding the file extension 
    for(i = 0; i < strlen(file_extn); i++)
    {
	for(j = 0; j < (sizeof(char) * 8) ; j++)
	{

	    fread(&ch, sizeof(char), 1, encInfo->fptr_src_image);
	    num = (ch & (-1 << 1)) | ((*(file_extn + i) >> j) & ~(-1 << 1));  
	    fwrite(&num, sizeof(char), 1, encInfo->fptr_stego_image);
	}

    }
    return e_success;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------//


Status encode_secret_file_size(long file_size, EncodeInfo *encInfo)
{
    int i,j, num,flag = 1,len;
    char ch;

    //encoding the secret file size
    for(i = 0; i< file_size; i++)
    {

    	//to get the file size
    	if(flag == 1)
	{
    	    len=file_size;
    	    flag=0;
	}
    	else
    	    len=0;


    	for(j = 0; j < (sizeof(char)*8) ; j++)
	{
	    
	    fread(&ch, sizeof(char), 1, encInfo->fptr_src_image);
	    num = (ch & (-1 << 1)) |((len >> j) & ~(-1 << 1));  
	    fwrite(&num, sizeof(char), 1, encInfo->fptr_stego_image);
	}
    }
    return e_success;
}
//------------------------------------------------------------------------------------------------------------------//
//encoding of the secret file data
Status encode_secret_file_data(EncodeInfo *encInfo)
{
    int i, j, num = 0;
    char ch1, ch2;

    //to set the offset to zero of the secret file
    fseek(encInfo->fptr_secret, 0, SEEK_SET);

    //to read and write to destination file
    while(fread(&ch2, 1, 1, encInfo->fptr_secret) > 0)
    {
	for(j = 0; j < (sizeof(char)*8) ; j++)
	{
	    fread(&ch1, 1, 1, encInfo->fptr_src_image);
	    num = (ch1 & (-1 << 1)) |((ch2 >> j) & ~(-1 << 1));  
	    fwrite(&num, 1, 1, encInfo->fptr_stego_image);
	}
    }

    //to copy the end of file
    ch2= EOF;
    for(j = 0; j < (sizeof(char)*8) ; j++)
    {
	fread(&ch1, 1, 1,encInfo->fptr_src_image);
	num = (ch1 & (-1 << 1)) |((ch2 >> j) & ~(-1 << 1));  
	fwrite(&num, 1, 1, encInfo->fptr_stego_image);
    }

    return e_success;
}
//------------------------------------------------------------------------------------------------------------------------//

//copy the remaining bytes to destination file
Status copy_remaining_img_data(FILE *fptr_src,FILE *fptr_dest)
{
    //to set offset to the cuurent position
    fseek(fptr_src,ftell(fptr_src), SEEK_SET);
    fseek(fptr_dest,ftell(fptr_dest), SEEK_SET);
    char ch;

    //to copy the remaining the data
    while(fread(&ch, 1, 1, fptr_src) > 0)
    {
	fwrite(&ch, 1, 1, fptr_dest);
    }
    return e_success;
}




/*==============================================================================================================================*/
//decoding process
Status do_decoding(EncodeInfo *encInfo)
{
    printf("INFO:opening the required files\n");
    if(open_decode_files(encInfo) == e_success)
    {
	printf("INFO:Done\n");
    }
    else
    {
	return e_failure;
    }
    printf("##DECODING PROCEDURE STARTED##\n");
    printf("INFO:Decoding the the magic string\n");
    
    //to check decoding of magic string is success or not
    if(decode_magic_string(MAGIC_STRING, encInfo) == e_success)
    {
	printf("INFO:Done\n");
    }
    else
    {
	return e_failure;
    }

    printf("INFO:decode the file extension type\n");
    if(decode_output_file_extn(encInfo) == e_success)
    {
	printf("INFO:Done\n");
    }
    else
    {
	return e_failure;
    }

    printf("INFO:Decode the file size\n");
    
    //to check file decode is success or not
    if(decode_file_size(encInfo) == e_success)
    {
	printf("INFO:Done\n");
    }
    else
    {
	return e_failure;
    }

    printf("INFO:Decode the file data\n");
    if(decode_file_data(encInfo->fptr_stego_image, encInfo->fptr_secret) == e_success)
    {
    	printf("INFO:Done\n");
	fclose(encInfo->fptr_secret);
	return e_success;
    }
    else
    {
	return e_failure;
    }

}
//--------------------------------------------------------------------------------------------------------------------//
//read and validate of commondline arguments
Status read_and_validate_decode_args(char *argv[],EncodeInfo *encInfo)
{
    short int i;

    //to check the file type
    FILE *file = fopen(argv[2],"r");
    fread(&i, sizeof(short int), 1, file);
    if(i != 0x4D42)
    {
	return e_failure;
    }
    fclose(file);
    if(argv[2] == NULL)
    {
    	return e_failure;
    }
    else
    {
    	encInfo->stego_image_fname = argv[2];
    }
    //checking the file or to creat
    if(argv[3] == NULL)
    {
    	printf("INFO:Output file not mentioned.created the default as test.txt\n");
    	encInfo->secret_fname = "test.txt";
    	return e_success;
    }
    else
    {
    	printf("INFO:Output file is taken\n");
    	encInfo->secret_fname = argv[3];
    	return e_success;
    }
}
//to check all files are opened or not
Status open_decode_files(EncodeInfo *encInfo)
{
    // Stego Image file
    encInfo->fptr_stego_image = fopen(encInfo->stego_image_fname, "r");
     
     //Do Error handling
    if (encInfo->fptr_stego_image == NULL)
    {
    	perror("fopen");
    	fprintf(stderr, "ERROR: Unable to open file %s\n", encInfo->stego_image_fname);
    	return e_failure;
    }
    else
    {
    	printf("INFO:opened the stego image.bmp file\n");
    }
    // Secret file
    encInfo->fptr_secret = fopen(encInfo->secret_fname, "w");
    
    //Do Error handling
    if (encInfo->fptr_secret == NULL)
    {
    	perror("fopen");
    	fprintf(stderr, "ERROR: Unable to open file %s\n", encInfo->secret_fname);
    	return e_failure;
    }
    else
    {
    	printf("INFO:opened the %s \n",encInfo -> secret_fname);
    }

    return e_success;
}
//------------------------------------------------------------------------------------------------------------------------------------//

Status decode_magic_string(const char *magic_string, EncodeInfo *encInfo)
{
    int i, j, count = 0;
    char ch2, ch1;

    //setting the offset to 54byte of the file
    fseek(encInfo->fptr_stego_image, 54, SEEK_CUR);

    //decoding the magic string
    for(i = 0; i < strlen(magic_string); i++)
    {
	for(j = 0; j < (sizeof(char)*8) ; j++)
	{
	    fread(&ch1, sizeof(char), 1, encInfo->fptr_stego_image);
	    ch2 = ((ch1 & 1) << j) | (~(1 << j) & ch2);
	}
	if(ch2 == magic_string[i])
	{
	    count++;
	}
    }

    //comparing the magic string
    if(count == 2)
    {
	return e_success;
    }
    else
    {
	return e_failure;
    }
}
//---------------------------------------------------------------------------------------------------------------------------------------------//

//decoding of file extension
Status decode_output_file_extn(EncodeInfo *encInfo)
{
    int i,j,count = 0;
    char ch2,ch1;

    //decoding the file extension
    for(i = 0; i < sizeof(int); i++)
    {
	for(j = 0; j < (sizeof(char)*8) ; j++)
	{
	    fread(&ch1, sizeof(char), 1, encInfo->fptr_stego_image);
	    ch2 = ((ch1 & 1) << j) | (~(1 << j) & ch2);
	}
    }
    return e_success;
}
//----------------------------------------------------------------------------------------------------------------------------------------------//

//decoding of file size
Status decode_file_size(EncodeInfo *encInfo)
{
    int i,j;
    char ch2,ch1;

    //decoding the file size
    for(i = 0; i < sizeof(int); i++)
    {
	for(j = 0; j < (sizeof(char) * 8) ; j++)
	{
	    fread(&ch1, sizeof(char), 1, encInfo->fptr_stego_image);
	    ch2 = ((ch1 & 1) << j) | (~(1 << j) & ch2);
	}
    }
    return e_success;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------//

//decode data of file
Status decode_file_data(FILE *secret_file,FILE *file_dest)
{
    int j;
    char ch1, ch2;

    //coping the data into the destination file
    while(ch2 !=  EOF)
    {
	for(j = 0; j < (sizeof(char) * 8) ; j++)
	{
	    fread(&ch1, sizeof(char), 1, secret_file);
	    ch2 = ((ch1 & 1) << j) | (~(1 << j) & ch2);
	}
	   if(ch2 != EOF)
	   {
	   fwrite(&ch2, sizeof(char), 1, file_dest);
	   }
    }
return e_success;
}

